info <- get_actor_data("Leonardo DiCaprio	")
View(info$results)
View((info$results)[[7]][[1]])
info <- get_actor_data("Cary Grant")
View(info$results)
View((info$results)[[7]][[1]])
View(info$total_results)
info <- get_actor_data("Cary Grant")
View(info$total_results)
View(info$page)
info <- get_actor_data("Cary Grant")
View(info$page)
View(info$results)
View((info$results)[[7]][[1]])
View(info$results$known_for)
View(info$results$known_for)
View(info$results$known_for$title)
titles <- View(info$results$known_for$title)
titles <- View(info$results$known_for)
info <- get_actor_data("Cary Grant")
titles <- View(info$results)
View((info$results)[[7]][[1]])
info <- get_actor_data("Cary Grant")
movie_titles <- info$results$known_for %>%
select("original_title")
movie_titles <- info$results$known_for[, "original_title"]
movie_titles <- info$results$known_for["original_title"]
movie_titles <- info$results$known_for["original_title"]
print(movie_titles)
info <- get_actor_data("Cary Grant")
movie_titles <- info$results$known_for[["original_title"]]
print(movie_titles)
print(info$results)
info <- get_actor_data("Cary Grant")
print(info$results$)
(info$results)
View(info$results)
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id = actor_info$results %>% pull(id)
return(actor_id)
}
info <- get_actor_data("Cary Grant")
print(info)
info <- get_actor_data("Cary Grant")
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
print(response)
body <- content(response, "text")
actor_info <- fromJSON(body)
actor_id = actor_info$results %>% pull(id)
return(actor_id)
}
info <- get_actor_data("Cary Grant")
info <- get_actor_data("Cary Grant")
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
print(info$results)
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
print(response)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id = actor_info$results %>% pull(id)
return(actor_info)
}
info <- get_actor_data("Cary Grant")
print(info$results)
print(info$results$known_for)
print(info$results$known_for$original$title)
print(info$results$known_for$original_title)
print(info$results$known_for[[9]])
print(info$results$known_for[[8]])
print(info$results$known_for[8])
print(info$results$known_for[7])
print(info$results$known_for[6])
print(info$results$known_for[1])
print(info$results$known_for[1][9])
print(info$results$known_for[1][8])
print(info$results$known_for[1]$original_title)
print(info$results$known_for[1])
is.list(info$results$known_for[1])
is.list(info$results$known_for[1])
is.list(info$results$known_for)
print(info$results$known_for)
is.list(info$results$known_for$title)
print(info$results$known_for$title)
View((info$results)[[7]][[1]])
View((info$results)[[7]][[1]])
print(info$results$known_for[["title"]])
print(info$results$known_for[["original_title"]])
is.list(info$results[[7]][[1]])
print(info$results[[7]][[1]])
is.list(info$results[[7]][[1]])
print(info$results[[7]][[1]][["orignal_title"]])
# load relevant libraries
library("httr")
library("jsonlite")
nyt_key <- "TieWrcIAGGvYhYaPtXDuBEf5xkppzHTj"
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query_params)
movie_name <- "Gladiator"
query_params <- list(api_key = nyt_key, query = movie_name)
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query_params)
print(response)
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
movie_name <- "Gladiator"
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query_params)
print(response)
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query = query_params)
print(response)
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Gladiator"
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET("https://api.nytimes.com/svc/movies/v2/reviews/search.json", query = query_params)
print(response)
body <- content(response, "text", encoding = "UTF-8")
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Gladiator"
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
extension <- "reviews/search.json"
response <- GET(paste0(base_uri, extension), query = query_params)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
print(response)
# What kind of data structure did this produce? A data frame? A list?
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
extension <- "reviews/search.json"
response <- GET(paste0(base_uri, extension), query = query_params)
body <- content(response, "text", encoding = "UTF-8")
data <- fromJSON(body)
print(response)
# What kind of data structure did this produce? A data frame? A list?
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
extension <- "reviews/search.json"
response <- GET(paste0(base_uri, extension), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
print(response)
# What kind of data structure did this produce? A data frame? A list?
# Manually inspect the returned data and identify the content of interest
# (which are the movie reviews).
# Use functions such as `names()`, `str()`, etc.
# Flatten the movie reviews content into a data structure called `reviews`
# From the most recent review, store the headline, short summary, and link to
# the full article, each in their own variables
# Create a list of the three pieces of information from above.
# Print out the list.
setwd("~/repos/book-exercises/chapter-18-exercises/exercise-1")
setwd("~/repos/a5-data-report-Daniel-Penkov")
library("knitr")
get_trending_table <- function() {  # for some reason pictures will not render in table
trending_actors_extension <- "/trending/person/week"
response <- GET(paste0(base_url, trending_actors_extension), query = key_param)
body <- content(response, type = "text")
actor_data <- fromJSON(body)
trending_df <- actor_data$results %>%
filter(known_for_department == 'Acting') %>%
arrange(-popularity) %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(c("name", "photo")) %>%
rename(Name = name, Photo = photo) %>%
head(5)
return(trending_df)
}
View(get_trending_table())
library("dyld")
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
print(response)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id = actor_info$results %>% pull(id)
return(actor_info)
}
info <- get_actor_data("Johnny Depp")
print(info$results)
print(info$results$known_for)
View(info$results$known_for)
View(info$results$known_for[1])
View(info$results$known_for[[1]])
table <- info$results$known_for[[1]]
(table)
is.data.frame(table)
table <- info$results$known_for[[1]] %>%
select("original_title")
is.data.frame(table)
View(table)
table <- info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
is.vector(table)
print(table)
info <- get_actor_data("Ryan Reynolds")
print(info$results$known_for)
View(info$results$known_for[[1]])
table <- info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
is.data.frame(table)
is.vector(table)
print(table)
info <- get_actor_data("Johnny Depp")
print(info$results$known_for)
View(info$results$known_for[[1]])
table <- info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
is.data.frame(table)
is.vector(table)
print(table)
print(get_actor_data("Johnny Depp"))
View(get_trending_table())
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id <- actor_info$results %>% pull(id)
actor_movies <- actor_info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
return(c(actor_id, actor_movies))
}
print(get_actor_data("Johnny Depp"))
details_response <- GET(paste0(base_url, "/person/", actor_id), query = params_list)
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id <- actor_info$results %>% pull(id)
actor_movies <- actor_info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
details_response <- GET(paste0(base_url, "/person/", actor_id), query = params_list)
return(c(actor_id, actor_movies))
}
details_response <- GET(paste0(base_url, "/person/", actor_id), query = params_list)
actor_id <- actor_info$results %>% pull(id)
actor_info <- fromJSON(body)
actor_id <- actor_info$results %>% pull(id)
actor_info <- fromJSON(body)
params_list <- list(query = actor_name, api_key = tmdb_key)
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id <- actor_info$results %>% pull(id)
actor_movies <- actor_info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
details_response <- GET(paste0(base_url, "/person/", actor_id), query = params_list)
return(c(actor_id, actor_movies))
print(details_response)
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id <- actor_info$results %>% pull(id)
actor_movies <- actor_info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
details_response <- GET(paste0(base_url, "/person/", actor_id), query = params_list)
print(details_response)
return(c(actor_id, actor_movies))
}
get_actor_data <- function(actor_name) {
actor_data_extension <- "/search/person"
params_list <- list(query = actor_name, api_key = tmdb_key)
response <- GET(paste0(base_url, actor_data_extension), query = params_list)
body <- content(response, type = "text")
actor_info <- fromJSON(body)
actor_id <- actor_info$results %>% pull(id)
actor_movies <- actor_info$results$known_for[[1]] %>%
select("original_title") %>%
pull("original_title")
details_response <- GET(paste0(base_url, "/person/", actor_id), query = params_list)
print(details_response)
return(details_response)
}
print(get_actor_data("Johnny Depp"))
View(get_trending_table())
get_trending_table <- function() {  # for some reason pictures will not render in table
trending_actors_extension <- "/trending/person/week"
response <- GET(paste0(base_url, trending_actors_extension), query = key_param)
body <- content(response, type = "text")
actor_data <- fromJSON(body)
trending_df <- actor_data$results %>%
filter(known_for_department == 'Acting') %>%
arrange(-popularity) %>%
mutate(photo = paste0("![", name, "](", "https://image.tmdb.org/t/p/h100", profile_path, ")")) %>%
select(c("name", "photo")) %>%
rename(Name = name, Photo = photo) %>%
head(5)
return(trending_df)
}
View(get_trending_table())
install.packages("httr")
library(dplyr)
library(jsonlite)
library(httr)
library(knitr)
library(tidyr)
install.packages("httr")
install.packages("httr")
install.packages("dplyr")
install.packages("jsonlite")
install.packages("knitr")
library(jsonlite)
library(httr)
library(knitr)
install.packages("knitr")
library("knitr")
install.packages("jsonlite")
install.packages("dplyr")
install.packages("tidyr")
install.packages("httr")
library("dplyr")
library("tidyr")
library("httr")
library("jsonlite")
install.packages("knitr")
library("httr")
install.packages("httr")
install.packages("httr")
# load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
extension <- "reviews/search.json"
response <- GET(paste0(base_uri, extension), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
print(response)
source("apikey.R")
pwd(
)
cpwd()
getwd(
)
setwd("~/repos/book-exercises/chapter-18-exercises/exercise-1")
source("apikey.R")
source("apikey.R")
movie_name <- "Parasite"
query_params <- list("api_key" = nyt_key, "movie_name" = movie_name)
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
extension <- "reviews/search.json"
response <- GET(paste0(base_uri, extension), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
print(response)
load relevant libraries
library("httr")
library("jsonlite")
# Be sure and check the README.md for complete instructions!
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Create a variable `movie_name` that is the name of a movie of your choice.
movie_name <- "Parasite"
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
extension <- "reviews/search.json"
uri <- paste0(base_uri, extension)
query_params <- list("api-key" = nyt_key, "movie_name" = movie_name)
response <- GET(paste0(base_uri, extension), query = query_params)
body <- content(response, "text")
data <- fromJSON(body)
print(response)
is.list(data)
data$results
View(data$results)
